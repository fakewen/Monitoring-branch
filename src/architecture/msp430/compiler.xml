<project name="compiler">
	<property name="ar" value="msp430-ar"/> <!-- NR 20130103: Not sure if ar is right for msp430, but it's what it was using before I added this property -->

	<dirname property="compilerpath" file="${ant.file.compiler}"/>
	
	<import file="${compilerpath}/../../taskdefs.xml"/>

<!--     <condition property="compiler.standard"
               value="-std=gnu99"
               else="-mstrict-align">
        <os family="windows"/>
    </condition> -->
    <!-- NR 20130219: -mstrict-align doesn't work for my msp430-gcc, setting the same standard as I use for AVR -->
    <property name="compiler.standard" value="-std=c99" />


    <condition property="compiler.debug.format"
               value="-gdwarf-2"
               else="-ggdb">
        <os family="windows"/>
    </condition>
    
	<macrodef name="platform-compile">
		<attribute name="objectfiles"/>
		<element name="compile-elements"/>
		<sequential>
			<mkdir dir="@{objectfiles}"/>
			<cc
				name="gcc"
				objdir="@{objectfiles}"
				>
				<compiler classname="net.sf.antcontrib.cpptasks.gcc.cross.GccCCompiler">
					<compilerparam value="msp430" name="target"/>
					<compilerarg value="-Wall"/>
					<compilerarg value="-Werror"/>
					<compilerarg value="-mmcu=${mcu}"/>
                    <compilerarg value="-DPLATFORM=${platform}"/>
                    <compilerarg value="-DARCHITECTURE=${architecture}"/>
                    <compilerarg value="-DCONFIGURATION=${configuration}"/>
					<compilerarg value="-Os"/>
					<compilerarg value="-finline-limit-1"/>
                    <compilerarg value="${compiler.standard}"/>
                    <compilerarg value="${compiler.debug.format}"/>
				</compiler>

				<compile-elements/>
			</cc>
		</sequential>
	</macrodef>
	
	<!--
	This macro links a bunch of object files and libraries into an output file (usually .elf).
	-->
	<macrodef name="platform-link">
		<attribute name="outputfile"/>
		<element name="link-elements"/>
		<sequential>
			<cc
				name="gcc"
				outfile="@{outputfile}"
				>
				<linker classname="net.sf.antcontrib.cpptasks.gcc.cross.GccLinker">
					<linkerparam value="msp430" name="target"/>
					<linkerarg value="-mmcu=${mcu}"/>
                    <linkerarg value="-umain"/>
				</linker>
				
				<link-elements/>
			</cc>

			<exec executable="msp430-size">
				<arg line="@{outputfile}"/>
			</exec>
		</sequential>
	</macrodef>

	<!--
	The objcopy macro is used to turn data that needs to be included into the final binary into an elf file. 
	On some configurations the infusion files that need to be loaded at init are packaged into an archive and then
	linked statically into the final executable.
	-->
    <condition property="objcopy.renamesection"
               value="--rename-section .data=.fartext,alloc,load,readonly,data,contents"
               else="">
        <equals arg1="${platform}" arg2="ocapi" casesensitive="false" />
    </condition>
	
	<macrodef name="platform-objcopy">
		<attribute name="inputfile"/>
		<attribute name="outputfile"/>
		<attribute name="arrayname"/>
		<sequential>
			<!-- local variables -->
			<local name="keywords"/>
			<!-- TODONR: findout how to put the infusions in flash only and align on page boundary -->
			<condition property="keywords" value="" else="">
				<equals arg1="@{arrayname}" arg2="di_app_infusion_archive"/>
			</condition>
			<local name="arraysize"/>
			<condition property="arraysize" value="${app-archive-size}" else="0">
				<equals arg1="@{arrayname}" arg2="di_app_infusion_archive"/>
			</condition>

			<!-- compile the binary file to a .c file -->
			<carray
				src="@{inputfile}"
				dest="temp_@{arrayname}.c"
				arrayname="@{arrayname}"
				arraysize="${arraysize}"
				keywords="${keywords}"
			/>

			<!-- compile -->
			<cc
				name="gcc"
				objdir="."
				>
				<compiler classname="net.sf.antcontrib.cpptasks.gcc.cross.GccCCompiler">
					<compilerparam value="msp430" name="target"/>
					<compilerarg value="-mmcu=${mcu}"/>
				</compiler>
				<fileset includes="temp_@{arrayname}.c" dir="."/>
			</cc>
			<exec executable="mv">
				<arg line="temp_@{arrayname}.o @{outputfile}"/>
			</exec>
		</sequential>
	</macrodef>

</project>
